Received 22 November 2024, accepted 1 January 2025, date of publication 8 January 2025, date of current version 7 February 2025.
Digital Object Identifier 10.1109/ACCESS.2025.3527330

Simulation of Software Development Team
Productivity Incorporating Social and Human
Factors: A System Dynamics Model
LUZ MARCELA RESTREPO-TAMAYO 1, GLORIA PIEDAD GASCA-HURTADO 1,
AND JOHNNY VALENCIA-CALVO 2
1Facultad de Ingenierías, Universidad de Medellín, Medellín 050026, Colombia
2Departamento de Ciencias Naturales y Tecnología, Universidad de Aysén, Coyhaique 5950000, Chile

Corresponding author: Luz Marcela Restrepo-Tamayo (lmrestrepo@udemedellin.edu.co)

This work was supported by the Universidad de Medellín (Colombia) with its funding for research promotion.

ABSTRACT Managing software development work teams requires planning resources and activities to
complete projects and deliver products satisfactorily and successfully. Estimating project time is part of
the planning stage and is mainly conducted using methods based on technical factors. However, since
software development is a process involving people with high levels of interaction, it is necessary to
consider non-technical factors in project management. This paper presents a simulation model to support
informed decision-making during planning, considering that non-technical factors, specifically social and
human factors (SHF), can affect product delivery time. From a systems perspective, software development
is a complex system. Therefore, System Dynamics (SD) modeling based on the rework cycle archetype is
used. The resulting model allows for analyzing the productivity of software development teams, integrating
three key SHF: communication, leadership, and teamwork. The generated burndown charts are used to
demonstrate that the model constitutes a basal structure oriented to understand the productivity behavior of
work teams. By taking a systemic approach, the model introduces new ways to identify dynamic behaviors
and facilitates the prediction of possible scenarios in the evolution of tasks, which helps work teams manage
their risks. Additionally, leadership strategies in accordance with the team’s status and a good perception of
communication can reduce rework and improve the ability to deliver software products on time. To the best
of our knowledge, the literature reported on approaches that holistically integrate these elements is limited,
which makes this proposal a significant contribution to the discipline.

INDEX TERMS Complex systems, human factors, performance analysis, productivity, system dynamics,
software development management.

I. INTRODUCTION planning is key because it builds the documents (the path)
Project management is a process aimed at establishing clear toward the achievement of the objectives; it defines the
objectives, assigning responsibilities, optimizing resources, scope, estimates resources, structures schedules, and adjusts
fostering communication, and monitoring progress [1]. This budgets [2]. The interest in this domain is justified by
approach can be interpreted from a systemic perspective indicators such as those of the Standish Group Report of
since it integrates different performance domains whose 2020, which states that only 35% of software development
interactions and interdependencies directly influence the projects were successful in terms of the estimated time and
achievement of the expected results. Among these domains, budget [3].

Because of the above, the estimation of labor effort, dura-
The associate editor coordinating the review of this manuscript and tion, and costs has been a topic of interest for research related

approving it for publication was Chaitanya U. Kshirsagar. to software development project management [4]. Various


 2025 The Authors. This work is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 License.
24604 For more information, see https://creativecommons.org/licenses/by-nc-nd/4.0/ VOLUME 13, 2025



L. M. Restrepo-Tamayo et al.: Simulation of Software Development Team Productivity Incorporating Social

estimation methods, such as function points [5], [6], source tivity of software development teams when considering
code sizing [7], and parametric estimation methods [8], [9], SHF?
are used to predict the required resources. Thesemethods help After the introduction, Section II relates the existing liter-
to plan, estimate, and control projects, set realistic deadlines, ature supporting this study. Section III presents the details of
and allocate resources efficiently. the simulation model and the variables that were taken into

However, effective estimation in software development account. Section IV presents the results, which are discussed
projects must consider both technical and non-technical fac- in Section V. Finally, Section VI presents conclusions and
tors since the latter also influence team productivity [10]. future work.
The inclusion of such factors in planning and estimation is
important [11] as it provides a more comprehensive view II. RELATED WORK
of team performance and facilitates the identification of Ensuring the success of software development projects in
actions for improvement [12]. Despite their importance, most the context of high information technology consumption
studies focus primarily on technical factors [7], in part due and a booming digital economy requires effective team
to the inherent complexities of quantifying non-technical management. Although numerous studies have focused on
factors [13], [14]. The above constitutes an obvious line the importance of technical factors, recent research has
of work to provide solutions in the face of rigorous quan- highlighted the relevance of non-technical factors in the per-
titative methods that include these factors and explore formance of software development teams. In this regard, the
how they affect productivity and their integration into the following are some studies from the literature that address
decision-making process through simulation [15]. This line strategies to approach the challenges of managing software
of work is addressed in this study, which aims to offer analysis development teams.
tools for the improvement of project management through
the strengthening of fundamental areas such as planning and A. SOFTWARE DEVELOPMENT PROJECT MANAGEMENT
estimation. The software development process may follow a traditional

System dynamics simulation is an effective paradigm for approach, whose sequential execution includes stages such
analyzing complex systems due to its ability to capture non- as requirements gathering, technical solution design, coding,
linear relationships, feedback loops, and behaviors that arise testing, debugging, delivery, and maintenance [22]. However,
from the dynamic interaction between system components, this software development approach often makes it difficult
including systems that involve social aspects [16] and is, to modify requirements, which can lead to rework and cus-
therefore, helpful in addressing the goal mentioned above. tomer dissatisfaction [23]. In contrast, agile approaches offer
Although this paradigm has been used to improve software an alternative through short iterations of time, where each
engineering project management [17], [18], the approach iteration functions as a self-contained mini-project in which
has been predominantly technical [19], paying little attention requirements are refined [24]. Continuous communication
to the social components involved in the development pro- with the customer allows quick adjustments to be made
cess [20]. according to their needs, facilitating an agile and satisfactory
Based on the identified gap, this study proposes an delivery of the final product [25].

SD-based simulation model that incorporates three SHF: Software development, under both approaches, is executed
communication, leadership, and teamwork [21]. Integrating by applying initiation, planning, execution, control, and clo-
these factors into software estimation in a formal way, using sure processes so it can be framed as a project [2] and,
appropriate measurement tools, provides a more holistic view therefore, must be managed [26]. However, software projects
of the team and decreases the subjective component repre- are challenging to manage because they have intangible
sented by their inclusion. That can lead to more realistic progress; they are complex, depend on customer require-
estimates, facilitating informed decision-making and more ments, and are subject to change [27]. Thus, it is relevant to
efficient project management. consider the definition and estimation of aspects such as cost,

Considering the above, the main contribution of this work time, quality, and scope of software development [25].
is a simulation model designed to support decision-making According to the Project Management Body of Knowl-
in the planning stage of software development projects. edge [2], planning is one of the key domains in project
This model analyzes team productivity from a perspec- management. A correct implementation of planning helps
tive that includes SHF based on the formality of complex to reduce risks and increase the probability of success in
systems modeling. It also provides a basic framework project execution. This process includes, among other things,
for understanding team productivity behavior, considering the estimation of required resources, the identification of
non-technical factors, and offers a framework for team potential risks, and the development of strategies for their
leaders to identify and decide which SHF should be management. In this context, the objective of this study
intervened. (which aims to analyze the estimation of the duration of soft-

From the above description, this study answers the follow- ware development projects, incorporating SHF) is justified.
ing research question: What elements should be considered Estimation is a fundamental process in software devel-
when designing a dynamic model to study the produc- opment project management, as it allows estimating the

VOLUME 13, 2025 24605



L. M. Restrepo-Tamayo et al.: Simulation of Software Development Team Productivity Incorporating Social

amount of effort, time, and resources required to complete This cycle has been included or adapted in studies related
a project [28]. Due to the complexity, uncertainty, and flexi- to project management [16]. For example, it has been used
bility inherent in software development [27], estimation can to explore how processes are related at project and business
be challenging. However, it should not be left to chance [26]. levels and how they affect workload variations [37]. A refor-
To address this challenge, several estimation methods help mulation allows multiple defects per task [38]. Moreover,
during the management process [29]. it has been considered to study long-range projects, such as

Estimation methods can be classified into non-algorithmic those related to construction [39], [40], or aerospace pro-
techniques, soft computing techniques, and algorithmic [4]. cesses [41], which demonstrates its versatility in different
Non-algorithmic techniques are characterized as flexible and disciplines.
experience-based, and among them, estimation is based on Particularly in software engineering, the Rework Cycle
analogy and expert judgment. Soft Computing Techniques, has been used as a basis to analyze, from simulation, the
which include Fuzzy logic-based estimation and Artificial management of software development projects. This cycle
Neural Networks, provide a cost-effective solution to prob- has allowed studying the influence of factors, such as the
lems that are difficult to model mathematically. Finally, availability of prerequisites, morale, or experience, on quality
algorithmic or parametric techniques are characterized by and productivity [42]. It has been applied to research the
being less flexible and using mathematical models. Among interaction between knowledge sharing and trust during the
these are the Function Point-BasedAnalysis, the Constructive requirements analysis phase [43]; it has also been used to
CostModel, Putnam’s SLIMmodel, SEER-SEM, and theUse understand the interaction between a learning system and
Case Based Estimation. The latter category could also include defect discovery [44], to analyze the influence of schedule
models based on machine learning [30]. pressure and overtime on productivity [17]. It has also been
Due to their qualitative nature, non-technical factors can be used to select the best project planning alternative regarding

considered in non-algorithmic techniques and Soft Comput- rework uncertainty [18]. In this sense, it is reasonable to
ing Techniques; moreover, some of them have been included start from this archetype [41], [44] to include SHF in the
in Parametric techniques. For example, the use of Case-Based estimation of software development projects.
Estimation considers motivation [8], and a recent proposal for
estimation in agile approaches considers face-to-face com- III. MATERIALS AND METHODS
munication [31]. In both cases, the factors are assigned a Under systemic thinking, software development processes
weight and a valuation as input data, but the need for concrete can be considered complex due to the multidirectional and
elements to measure them is still evident. non-linear interaction dynamics between developers [45].

A set of non-technical factors, called SHF, are perceived as Decisions made during the project require continuous feed-
productivity influencers of software development teams [32]. back [46], and the effect of interventions on the process does
Communication [33], leadership, and teamwork [34] are par- not have linear or immediate impact [7], [47].
ticularly important among these factors as they help teams The modeling process using SD is iterative and consists
meet the challenges of Industry 4.0 [35]. Despite their rel- of five steps [16]: (1) problem articulation, (2) dynamic
evance, these factors still have the potential to be explicitly hypothesis formulation, (3) simulation model formulation,
integrated into estimation processes. (4) validation, and (5) policy design and evaluation (see

Fig. 2).
B. REWORK CYCLE
Successful project execution requires a well-defined set of
tasks, which is influenced by productivity and the number
of people involved in the project. However, the quality of
the work can generate rework that may not be immediately
detected, which in turn can increase the number of tasks to be
performed. This dynamic is known as the Rework cycle, and
its structure is presented in Fig. 1 [36].

FIGURE 2. System dynamics’ modeling process. Adapted from [16].

In Step 1, it is necessary to identify the problem, why it
is a problem, the variables to be considered, and the vari-
ables’ historical behavior [16]. In this case, the problem
articulation focuses on describing the software development

FIGURE 1. The structure of the Rework cycle. Source: [36]. process from a dynamic and complex perspective, integrating

24606 VOLUME 13, 2025



L. M. Restrepo-Tamayo et al.: Simulation of Software Development Team Productivity Incorporating Social

non-technical factors with the appropriate theoretical support.
This approach explores theories related to team dynamics and
the behavior of productivity patterns over time. One of the
relevant aspects of this step is to characterize the variables,
which can be done using a hybrid methodology that includes
both a literature review and a survey-based study [48].
The objective of Step 2 is to build a conceptual model or

dynamic hypothesis. That requires declaring variables and
defining the underlying causal relationships to condition the FIGURE 4. Feedback loops.

system of interest’s behavior using two tools: a model bound-
ary chart and a causal diagram [49].

The model boundary chart outlines the scope of the model intermediate step bridging the conceptual model and the

under analysis by categorizing variables as endogenous, mathematical representation of the system’s behavior [54].

exogenous, or excluded [16]. Endogenous variables are those The stocks represent accumulation within the system at a

whose behavior is determined by the relationships and feed- given time and are altered by the inflows and outflows. Thus,

back within the system. Exogenous variables are those whose stocks are the current values of the variables that result from

behavior is determined by external factors and are not directly the cumulative difference between inflows and outflows.

affected by the system’s internal dynamics. Finally, excluded Graphically, rectangles are used for the stocks, arrows for the

variables are those that, although they could be relevant inflows and outflows, valves controlling the flows, and clouds

for analyzing the system, are omitted because (among other for the sources and sinks of the flows [55], as shown in Fig. 5.

reasons) they add unnecessary complexity to the model or
because the literature justifies their absence.

In a complementary manner, the causal diagram formalizes
the construction of the dynamic hypothesis using graphs,
which reflect whether the causal relationships between two
variables, A and B, are positive or negative [50]. A causal FIGURE 5. General structure – Stock and flow diagram.
relationship is positive (+) if increasing A increases B or
decreasing A decreases B (see Fig. 3a). A causal relationship An SD simulation model is composed of stocks, flows,
is negative (-) if increasing A decreases B or decreasing and decision functions. Decision functions control the flow
A increases B (see Fig. 3b). Causal relationships that are rates between the stocks from the available system informa-
affected by time or information delays are represented by the tion [56] so that the model’s mathematical formulation is
|| symbol. done through differential equations [57].

Step 4 suggests tests related to the model’s structure and
behavior [58]. The model structural tests are:

• Boundary adequacy: Assess the appropriateness of the
model boundary for the purpose at hand.

• Structure assessment: Ask whether the model is consis-
tent with knowledge of the real system relevant to the

FIGURE 3. Causal relationships.
purpose.

Feedback loops consist of two or more causal relation- • Dimensional consistency: Ensure that variables have
ships among variables in such a way that, following the correctly specified units, are consistent, and have real-
causality, one returns to the first variable. Feedback loops world equivalence.
can also be positive (+) or negative (-) [51]. The positive • Parameter assessment: Ensure that each constant (and
ones, also called reinforcement loops, generate exponential variable) has a clear, real-life meaning.
growth behavior (see Fig. 4a). Negative or balancing ones • Extreme conditions: Ensure that the model is robust to
generate equilibrium or goal-seeking behavior (see Fig. 4b). extreme values of the input data.
Feedback structures generate fundamental modes of systemic • Integration error: Ensure that the results are not sensitive
behavior, also called archetypes [52]. These structures are to the choice of time step or integration method.
frequent in business situations and are constituted by delays, The model behavior tests are:
reinforcement loops, and balance loops [53]. • Behavior reproduction: Evaluate the ability of the model
Step 3, corresponding to the formulation phase, involves to reproduce the behavior of the system.

defining the input variables along with their respective units, • Behavior anomaly: Tests for behavioral anomalies
constructing the stock and flow diagram, and providing the examine the significance of relationships or formula-
equations for all variables included in the diagram [50]. tions by askingwhether anomalous behavior arises when
Specifically, the stock and flow diagram serves as an the relationship is removed or modified.

VOLUME 13, 2025 24607



L. M. Restrepo-Tamayo et al.: Simulation of Software Development Team Productivity Incorporating Social

• Family member: Evaluate whether the model can gener- From a systemic perspective, software development can
ate the behavior of other instances of the same class that be considered a complex system in which several factors,
the system imitates. including team size, influence productivity. Some studies

• Surprise behavior: Examines unexpected or anomalous have shown that increasing the size of the development team
behavior. tends to reduce its productivity [59]. Teams with less than

• Sensitivity analysis: Inquire whether conclusions nine members tend to display higher levels of productivity
change in ways that are important for their purpose compared to larger teams [60]. Agile methodologies, such as
when assumptions vary within the plausible range of Scrum, recommend teams of up to ten members [61], called
uncertainty. small teams [62]. These small teams are dynamic [63], [64]

• System improvement: Find out if process modeling and go through five stages over time [65], [66] as shown in
helped change the system for the better. Fig. 6.

Finally, in Step 5, different scenarios are built, their sensi-
tivity is studied, and the corresponding recommendations are
made [49]. This simulation process has been established as
the method for this research work.

From a strategic perspective, SD is the most appropriate
simulation paradigm for this study because it allows for the
modeling of the aggregate behavior of productivity at the
software development team level, transcending the individual
analysis of developers. This approach facilitates the under-
standing of collective patterns and strategic decision-making,
providing a holistic view that is essential for effective soft- FIGURE 6. Stages of team development. Adapted from [65], [66].
ware project management.

The five stages of team development are:

IV. RESULTS • Forming:The members begin to get to know each other

Building upon the methodological framework presented in and define the team’s objectives. Communication is for-

the previous section, this section describes the develop- mal, and people tend to be cautious and dependent on

ment of a comprehensive simulation model of software the group leader.

development team productivity that incorporates SHF. The • Storming:This is a stage of conflicts and challenges. The

study addresses the first four steps of the SD modeling members question norms and roles. Communication is

process (see Fig. 2). The first step, problem articulation, open and frank, which can lead to disagreements and

specifically the characterization of variables, was informed tensions.

by a prior study. The subsequent steps—dynamic hypothe- • Norming:The team begins to overcome conflicts and

sis formulation, model formulation, and model testing and define norms and processes to work efficiently. Commu-

validation—were fully developedwithin this research. Step 5, nication seeks to resolve conflicts and reach consensus.

corresponding to Policy Formulation and Evaluation, is iden- There is an atmosphere of trust and comfort in working

tified as future work, focusing on developing a simulation together.

framework that integrates data analysis and intervention • Performing:This stage focuses on executing tasks and

strategies. This section concludes by presenting simulation achieving objectives. There is creativity, initiative, and

scenarios and discussing the model’s limitations. learning. Communication is task-oriented. Team mem-
bers leverage individual strengths and abilities. This
stage is the most productive.

A. PROBLEM ARTICULATION • Adjourning:Occurs when the team prepares to disband.
This study focuses on the following SHF: communication, Communication focuses on reflecting on the team’s
leadership, and teamwork; this is mainly because these fac- achievements and experiences.
tors are required explicitly by software engineering within A distinctive feature of team development is its non-linear
the Industry 4.0 context [35]. In a previous study, the char- evolution through the stages of Tuckman’s model. Some
acterization of these three factors included their definitions, teams may go through all the stages [67], [68] or experience
their relationships with other variables, and the methods used setbacks and jumps among them [69]. Each stage involves
for their measurement. A mixed methodology, including sys- aspects related to communication among team members and
tematic literature mapping and a survey-based study, was the different roles of the leader [70]. It is advisable to adopt
proposed and used for this purpose [48]. This character- a mentor role if the team is in the forming stage and an
ization allowed the identification that teamwork promotes instructor role if it is in the storming stage. If the team is in
productivity through leadership actions empowered through the norming stage, a coaching role is advisable, while in the
communication. performing stage, it is appropriate to assume a facilitator role.

24608 VOLUME 13, 2025



L. M. Restrepo-Tamayo et al.: Simulation of Software Development Team Productivity Incorporating Social

Tuckman’s theory provides insight into the development TABLE 1. Model boundary chart.

of teams over time, highlighting the relationship between
each stage and team effectiveness. It also explains how
communication and group dynamics evolve, even in virtual
environments [71]. Team leaders and team members can
use this theory to manage the transitions and challenges
that arise at each stage [72], including through gamifica-
tion [73]. To identify the stage the team is in, the Group
Development Questionnaire (GDQ) [74] or its short version,
GDQS [75], can be used. Alternatively, a retrospective ques-
tionnaire available in the literature can be used [76].
Teams with low levels of conflict are expected to have high

performance [77]. Under this scenario, the project progress
can be in line with the ideal progress, which can be evidenced capacity considers the technical capacity of the people who
by a burndown chart [2], [28]. Since this graphical represen- constitute the team.
tation evidences the aggregate progress of the team [78], then Considering the above description, Table 1 presents the
the time horizon of interest is limited by the expected duration endogenous, exogenous, and omitted variables that delimit
of a work cycle. this study’s understanding of software development teams’

The analysis of a burndown chart allows revealing prob- productivity behavior.
lems that require corrective action [78]. On the other hand, When managing a software development team, the team
this type of chart can evidence anti-patterns of methodologies must remember that work capacity depends on both technical
such as Scrum (Fig. 7), where late acceptance of work done or and non-technical factors, which is relevant in the project
low team progress may be associated with systemic problems estimation phase. The estimation process requires calculating
of both the team and the organization [79]. the effort, time, and resources needed for its completion [28].

In this study, the estimated effort of the project is represented
through the work to be done, which should correspond to the
work completed once the work cycle has finished.

The discrepancy is the difference between the work to be
done and the ideal progress. The work to be done represents
the amount of work that is actually left to be delivered. In con-

FIGURE 7. Patterns - burndown chart. Source: [79]. trast, the ideal progress represents the amount of work that
should be left to be delivered if no variations occur during the
work cycle. In this way, if the work to be done increases, then
the discrepancy also increases. Under this scenario, errors

B. DYNAMIC HYPOTHESIS arise because delays mean having less time to complete the
Non-technical factors are intrinsically complex and rooted in same number of tasks, which, in turn, increases rework and,
culture and social structures, so they do not undergo notice- thereby, increases the work to be done [36].
able changes in short periods [80]. This fact is supported by On the other hand, if the discrepancy increases due to
the use of retrospective instruments to learn about the percep- the growth of the work to be done, then the team is com-
tion of communication [81], the perception of leadership [82], pleting fewer tasks than it should, making it necessary to
and the teamwork stage [75]. The latter instrument allows for intervene in the team. This intervention may be related to
the estimation of the team’s percentage performance accord- strategies from the leader’s role [70], given that leadership is
ing to Tuckman’s model. defined as the ‘‘ability to direct and coordinate the activities

In software estimation, the team’s size is important due of other team members, assess team effectiveness, assign
to the influence of the experience, skills, and availability of tasks, develop team knowledge, skills, and abilities, motivate
the members on estimating the effort required to complete a team members, plan and organize, and establish a positive
project. Having a large team can allow work to be distributed atmosphere’’ [64].
among more people, and potentially, this can speed up the Effective communication enables successful team-
project’s development. However, it can also introduce com- work [86], promotes problem-solving [64], and serves as a
plexities, such as the need for greater communication among relevant element for coordination between leadership and
its members [10]. In fact, previous studies suggest that it is teamwork [87]. Finally, improvements in teamwork lead to
not advisable to add people to a team when the project has greater productivity [82]. Consequently, improving team-
already started [83], [84], [85]. Thus, the size of the team is work increases the team’s work capacity and, therefore,
an element that is analyzed in the estimated nominal capacity reduces the work to be done.
and, therefore, is not included in this analysis. Similarly, Based on the endogenous explanation and the classification
in this analysis, it is assumed that the estimated nominal of variables, Fig. 8 presents the causal diagram constructed in

VOLUME 13, 2025 24609



L. M. Restrepo-Tamayo et al.: Simulation of Software Development Team Productivity Incorporating Social

TABLE 2. Input data.

FIGURE 8. Causal loop diagram.

Stella Architect®. It evidences a balancing loop called ‘‘B1:
Productivity and SHF’’ and a reinforcing loop called ‘‘R1:
Rework cycle.’’

C. FORMULATION
The simulation model presented in this study consists of three
sectors. The first is related to the generation of rework; the
second presents the relationship between the team’s work
capacity and SFH. Finally, the third presents the behavior of
the error percentage. For these sectors to adequately reflect
the dynamics of the system, specific input data are necessary,
which are detailed in Table 2.

Within the rework cycle, there are four stocks: work to be
done, work done, rework, and error percentage. The ‘work
to be done’ becomes ‘work done’ through the ‘work rate,’
which depends on the team’s work capacity and the error
percentage. If that percentage is greater than 0%, the work
done is less than expected, as it generates rework that needs
to be replanned. Under these conditions, the rework must
be done again, increasing the time required to complete the
project. In this way, replanning allows for modeling the delay
generated by analyzing and rescheduling rework as newwork
to be done (Fig. 9).
The initial value of the work to be done corresponds to

the effort estimated by the team to complete a milestone or
a cycle of the project. The work rate is calculated as the mul-
tiplication of the team’s work capacity and the complement
of the error percentage. The rework rate is calculated as the
team’s work capacity multiplied by the error percentage, con-
sidering a time delay of one unit of time, which represents the
period needed to identify the errors made. The rescheduling
considers the time delay associated with the team’s delay in
reallocating the erroneous work. The equations correspond-
ing to the variables involved in the rework cycle sector are FIGURE 9. Sector - Rework cycle.

detailed in Table 3.
Estimating a project includes defining the time units

required to complete it [27]. Thus, in this model, the esti- nominal capacity is done, it is possible to establish the ideal
mated time is the result of dividing the work to be done progress. Considering these variables, the discrepancy repre-
by the estimated nominal capacity. If it is assumed that in sents the difference between the work to be done and the ideal
each period, the amount of work dictated by the estimated execution.

24610 VOLUME 13, 2025



L. M. Restrepo-Tamayo et al.: Simulation of Software Development Team Productivity Incorporating Social

TABLE 3. Rework cycle formulation. Taking the above into account, the effect of teamwork
reflects the relationship between the initial stage of team-
work, the strategy from the leadership role, and the perception
of communication. Since the team’s performance depends on
the stage it is at, according to Tuckman’s model, the team’s
work capacity is the estimated nominal capacity, affected
percentage-wise by the effect of teamwork. Fig. 10 relates
SHF to work capacity.

FIGURE 10. Sector - Work capacity.

A negative discrepancy indicates that the ideal perfor-
Table 4 provides a detailed outline of the equations gov-

mance exceeds the work to be done, meaning that the team
erning each term involved in the work capacity sector. The

is completing more tasks than estimated. There is no need for
INIT() function is a built-in feature in Stella Architect®,

interventions, as no delays in project completion are evident.
designed to retrieve the initial value of the variable spec-

On the other hand, a positive discrepancy indicates that tasks
ified as its argument. Meanwhile, the GRAPH() function

are not being executed as planned; therefore, it is necessary
represents a graphical relationship between the variable Per-

to identify the cause of the delay and define a plan of action.
formance percentage (y-axis) and Initial teamwork stage

Variations from the ideal execution may arise because the
(x-axis) based on the data points specified in the table.

team is not in its most productive stage. In this way, the
Additionally, the term TIME is an integrated variable in the

performance percentage depends on the stage the team is
simulation environment, representing the progression of time

in, according to Tuckman’s model (Fig. 6). The result of
within the dynamic model.

applying the short version of the Group Development Ques-
tionnaire [75] provides the input data for the variable referred

TABLE 4. Work capacity formulation.
to as the initial stage of teamwork. If there is no historical
information about the team, it will be assumed that its initial
state is Forming.

Leadership can support the actions that guide the team
toward achieving objectives [64]. These strategies vary
according to the team’s stage [70]. According to situational
leadership theory, there is no single leadership style that is
effective for all situations [88]. However, a leader must adapt
his or her style according to the maturity and competencies of
the team or individual he or she leads, as well as the specific
circumstances of the environment [89]. For this model, the
Strategy from the leader’s role is input data. It is possible
to modify this strategy based on team members’ perceptions
of formal leadership [82]. If the members agree with the
premises set forth in the instrument, then it is assumed that Each value corresponding to the y-axis of the performance
the current strategy is well perceived. percentage corresponds to the midpoint of the four segments

Considering that communication is a necessary coordina- of equal size obtained by dividing the interval 0-1 by 4 since,
tion mechanism to promote team effectiveness [87], good according to the Tuckman model, there are four possible
perception can enhance the strategy from the leader’s role. states of teamwork.
In this way, the perception of communication is input data The formulation of the auxiliary variable Teamwork Effect
that can be obtained from the results of evaluating the com- (see Table 5 ) depends on the level at which each of the
munication of the Teamwork Quality instrument [81], [90]. three SHF is situated according to the descriptions presented

VOLUME 13, 2025 24611



L. M. Restrepo-Tamayo et al.: Simulation of Software Development Team Productivity Incorporating Social

in Table 2, in which the NORMAL() function generates a TABLE 6. Percentage of rework according to process maturity.

random number from a normal distribution, where the first
argument represents the mean, and the second represents the
standard deviation.

TABLE 5. Teamwork effect formulation.

The percentage of rework depends on the process’ maturity
characteristics [92], and it increases as the time to com-
plete the project runs out [93]. However, communication can
reduce misunderstandings and problems [64]. Thus, the stock
and flow diagram corresponding to the error percentage is
presented in Fig. 11.

In Table 5, the central limit theorem justifies using the
normal distribution since each of the stages of teamwork
can be understood as an aggregate of multiple factors [87]. FIGURE 11. Sector - Percentage of error.

Suppose these factors are assumed to be independent, and
the means of all these factors are calculated for the teams. Schedule pressure can be calculated as the ratio between
In that case, the resulting distribution of these means will be the actual completion time and the proposed completion
approximately normal [91]. time [94]. However, this model proposes its calculation as a

The average corresponds to the performance percentage of function of the work to be done. If the discrepancy is positive,
each stage of the team. The deviation, set at 0.042, is obtained the time pressure is nonexistent because the estimated work is
by dividing the amplitude of each stage (0.25) by 6, which being fulfilled. But if the discrepancy is negative, more tasks
ensures that the overlap between the distributions of each need to be completed in less available time, which, in turn,
stage is less than 0.3%. increases the error percentage.

If the strategy from the leader’s role is suitable according to On the other hand, the rework expressed as a percentage
the initial stage of teamwork, and if good communication is of the total development effort depends on the process’s
also perceived, then the team will have a higher performance maturity. Under the framework provided by the Capabil-
percentage than if poor communication is perceived or if the ity Maturity Model Integration (CMMI), the percentage of
strategy from the leader’s role is not the most appropriate for rework according to each of the maturity levels is presented
the level at which the team is. In this way, a truncated normal in Table 6 [92].
distribution is used, considering the upper 10 percentile when Approximately 79% of the companies certified in CMMI
there is a good perception of communication and the strategy are at level 3 [95]. However, it is important to acknowledge
from the leader’s role is adequate. On the other side, the lower the existence of companies that are considered small orga-
10 percentile is taken into account when there is a poor per- nizations as they are made up of fewer than 25 people [96].
ception of communication and the strategy from the leader’s For these companies, implementing the ISO 29110 standard
role is not adequate. The values of the normal distribution is beneficial since it promotes good practices in software
between both percentiles correspond to an adequate strategy development and maintenance [97]. Some studies suggest
and a poor perception of communication or an inadequate that the implementation of the ISO 29110 standard can reduce
strategy and a good perception of communication. rework to levels comparable to those of CMMI level 3 [98].

24612 VOLUME 13, 2025



L. M. Restrepo-Tamayo et al.: Simulation of Software Development Team Productivity Incorporating Social

Considering the above, the maturity level is a required input a team after the project has started can be counterproduc-
in the model. If the company has historical data on the per- tive [83], [84], [85]. Therefore, the team size is analyzed
centage of rework or a CMMI certification, it can be one of within the estimated nominal capacity, but it is not considered
those suggested in Table 2. In the absence of this information, as an input in the model.
Level 3 will be assigned if ISO 29110 has been implemented If the team size has been considered to determine the
or Level 1 otherwise. estimated nominal capacity, it can be inferred that the team

Finally, a strategy to mitigate errors when developing soft- leader has already identified the members. In this way, one of
ware is to promote communication within the team [93], the model’s assumptions is that the team members have the
which may be related to the team’s ability to solve prob- necessary technical skills to carry out the project. Further-
lems [99]. In this way, the early solution of problems can be more, the model assumes that the scope of work will remain
calculated as the ratio between the identified problems and the same during the simulation period.
the resolved problems. These values can be obtained from Regarding teamwork, this proposal employs the sequence
the collaborative platforms used by software development of small group stages proposed by Tuckman [62], [65] since
teams [48]. it is related to communication and leadership [70]. This

Table 7 presents the formulation for the error percentage proposal has limitations related to the lack of rigorous quan-
sector. Here, the IF THEN ELSE structure represents a log- titative research since it was constructed based on a literature
ical comparison, while the RANDOM() function generates review and observations of some work groups [100]. Further-
a uniformly distributed random number between the two more, there is a lack of analyses related to (i) the possibility
specified arguments. Additionally, STOP TIME defines the of a team being in multiple stages simultaneously, (ii) the
simulation’s temporal duration, which can either be set to a possibility of a team reaching the performing stage, and
fixed value or depend on another variable. In this case, STOP (iii) the factors that influence the rate of progression from one
TIME aligns with the Estimated time. stage to another [101].

Despite the reported limitations in the literature regard-
TABLE 7. Error percentage formulation. ing Tuckman’s proposal, it is recognized as a model that

facilitates the understanding of the intrinsic complexity of
team dynamics and can be used to manage it [102]. It is
a widely referenced theory in the field of human resource
development [100]. It has been used in research related to
group work in educational projects [103], [104], [105] and
under agile methodologies [106], [107], [108], which justifies
its selection for this research.

Alternatively, the Multifactor Leadership Questionnaire
(MLQ) is an instrument that allows the identification of
whether the type of leadership is transformational, trans-
actional, or laissez-faire, and it has been used in software
engineering [48]. However, it is a licensed instrument that
requires expertise to interpret its results, and some studies
recommend limiting its use due to validity issues [109], [110].
In this study, the model focuses on leadership perception,
allowing a more accessible analysis without the need to iden-
tify a specific type of leadership or obtain a license for this
instrument.

D. TESTING
Assessing the simulation model is essential for identifying
and correcting errors in the early stages of the modeling
process [16]. Although this evaluation should be conducted

Before the testing, it is important to clarify the assumptions from the beginning, various tests must be executed, as their
and limitations of the proposedmodel. In software estimation, verification strengthens the reliability of the model before
the size of the team is considered, as the experience, skills, its use [111]. The results in Table 8 indicate that the model
and availability of its members influence the effort required to structure reflects the productivity behavior of software devel-
complete a project. While a larger team can better distribute opment teams during short cycles.
tasks and accelerate development, it also introduces greater Behavioral tests intend to verify that the model adequately
complexities, especially in terms of communication [10]. reproduces the observed behavior patterns in the real sys-
In fact, previous studies suggest that adding more people to tem, under normal conditions and in stress scenarios. By

VOLUME 13, 2025 24613



L. M. Restrepo-Tamayo et al.: Simulation of Software Development Team Productivity Incorporating Social

TABLE 8. Model structural test. TABLE 9. Model behavior test.

comparing the model’s output with historical data and con-
ducting sensitivity analyses, it is possible to assess whether communication = 1). The leader adopted a facilitator role
the variations in the model’s parameters produce coherent (strategy from the leader’s role = 4). The application of
and realistic responses. During this process, it is possible to the GDQS instrument allowed us to identify that one of the
identify and correct potential discrepancies, ensuring that the teams is at a more advanced stage of development (initial
model is a reliable tool for analysis and decision-making. teamwork stage = 4: performing) while the other is at the
Table 9 relates the types of behavioral tests conducted and preceding stage (initial teamwork stage = 3: norming). Each
the results. The model is thus appropriate. day, the team reported both the work completed and the

rework identified, data fromwhich the actual work to be done
E. SIMULATION SCENARIOS was calculated. Table 10 presents the burndown chart for each
Two work teams were analyzed in parallel during a short team, including both simulated and real data, along with the
phase of a software development project to carry out the same respective coefficient of determination.
activities. Both teams estimated 100 units of effort that need Fig. 12 shows the burndown chart and the simulated rework
to be completed (work to be done = 100), and each team behavior of a team in the performing stage, maintaining the
indicated that they could deliver 20 units of effort per day previously presented conditions. Although rework is gen-
(estimated nominal capacity = 20). In this way, the time in erated, the positive perception of communication and the
which the tasks associated with those units of effort should alignment between the strategy from the leader’s role and the
be completed is five days (estimated time = 5). Based on team’s stage of development allows for the planned tasks to
historical data, around 20% of rework is generated (maturity be completed within the estimated time. The behavior shown
level = 3), and when rework is identified, it is rescheduled in this burndown chart is ideal, as indicated in Fig. 7.
to the same day (rescheduling time = 1). Additionally, for From an organizational viewpoint, the team may expe-
every ten identified problems, each team indicated that they rience slight delays due to the maturity process being in
were capable of early resolution for 2 of them. Immature (level 1) or Project-controlled states (level 2).

On the other hand, the team perceives that communi- Although a rework percentage exceeding 25% is anticipated
cation is good, according to the responses to this vari- (which is expected to lead to late project completion), being in
able from the Teamwork Quality instrument (perception of the performing stage, experiencing effective communication,

24614 VOLUME 13, 2025



L. M. Restrepo-Tamayo et al.: Simulation of Software Development Team Productivity Incorporating Social

TABLE 10. Simulated data vs real data. TABLE 12. Simulations related to low progress associated with SHF.

FIGURE 12. Burndown chart and rework – Ideal case.

TABLE 11. Simulations of teams with low maturity levels.

for the stage of development the team is in, or the members
perceive deficiencies in communication. Table 12 presents
the work to be done, the work completed, and the rework,
simulated based on the proposed model, incorporating SHF.
In this analysis, the maturity level remains at level 3, and 2 out
of every ten identified problems are resolved early; addition-
ally, it is assumed that the team perceives communication
well. The runs correspond to each of the stages of team devel-
opment: Run 1 corresponds to forming, run 2 to storming, run
3 to norming, and run 4 to performing.

The simulations’ analyses (Table 12) reveal that the
absence of a clear leadership strategy is associated with
lower team performance, especially during the storming stage
(run 2). That is an aspect related to the fact that teams in the
early stages of formation face problems that take longer to
resolve [112].

These results suggest that, even in teams that reach the per-
and having a suitable strategy could mitigate the impacts of forming stage, effective leadership is essential to ensure the
these delays on the project’s delivery (Table 11). success of the project [113]. Furthermore, although progress
From the perspective of SHF, low progress may be due can often be slow, the team’s performance tends to improve

to the team not being in the ‘‘performing’’ stage, which when there is alignment between the leader’s role strategy
represents the highest level of performance. Furthermore, the and the stage the team is in [114]. However, this suggests
leadership strategy employed may not be the most suitable that strategies can be viewed beyond a simple classification

VOLUME 13, 2025 24615



L. M. Restrepo-Tamayo et al.: Simulation of Software Development Team Productivity Incorporating Social

of good or bad, and it is preferable to evaluate them based on consider non-technical factors, there remains a need for an
their relevance, according to the team’s reality. approach that adequately integrates them, considering the

One relevant aspect is how leadership strategies can available instruments for their measurement. In fact, having
dynamically adapt to changing team behaviors. Effective strategies to obtain data for simulating software processes
leadership requires situational awareness and flexibility in remains an aspect to be addressed [134]. Regarding this
response to changes in the team as the project progresses. gap, the contribution of this study lies in the formalization
During the team’s initial (forming) stages, a directive lead- of a structured evaluation framework based on a simulation
ership style may be more appropriate to provide clear model that incorporates non-technical factors using the tools
direction and establish roles. As the team moves toward reported in the literature.
norming or performing stages, leaders should shift to a more The simulation model presented in this study can cap-
facilitative role, encouraging autonomy and collaborative ture the complex dynamics of software development team
problem-solving. In addition, leadership strategies need to productivity over short time frames, incorporating technical,
be adjusted to account for nonlinear transitions, such as non-technical, and organizational aspects. This integrative
regressions in team performance due to conflict or external approach allows for estimating the behavior of productivity in
pressures. Dynamic leadership adaptation may also involve response to variations in aspects such as the level of organiza-
the use of feedback loops, where leaders evaluate the effec- tional maturity or the stage of development in which the work
tiveness of their strategies and make ongoing adjustments team is situated. In this way, the model reveals relationships
based on team performance data. among these aspects, showing, for example, how an adaptive

leadership strategy can enhance the team’s work capacity.
The results obtained align with previous studies that highlight

V. DISCUSSION the interdependence of technical and human factors [135]
Software development can be considered a complex system and, on the other hand, validate the effectiveness of the
because developers interact strongly with each other [45]. approach used [15], [134]. These considerations reinforce the
Throughout the execution of the project, decisions are made applicability of the model in real-world scenarios, providing
based on feedback [46], and the effect of the interventions recommendations that support the management of software
made on the process is often non-linear [7], showing their development teams when a project needs to be executed.
results gradually [47]. Furthermore, the interest in mak- The simulation provides an analytical framework that facil-
ing more strategic decisions and studying the productivity itates the identification of strategic interventions in project
behavior of the software development team rather than the management, allowing the adoption of practices that enhance
individual developers requires a high level of aggregation, team effectiveness [136]. In this case, the proposed simulation
which is why SD is preferred over other paradigms, such model highlights the importance of maintaining effective
as Agent-Based Simulation [115] or Discrete Event Simula- communication and adaptive leadership, especially in pro-
tion [55]. cesses characterized by a high level of human intervention.

System Dynamics models in Software Engineering can Adjusting these non-technical aspects can mitigate internal
address the complexity of strategic issues in traditional man- friction and enhance productivity by strengthening team-
agement approaches [116] and serve as a tool to support work [82]. In this way, the model presented in this study
planning and control at the tactical level [46]. Additionally, serves as support for informed decision-making, contributing
it is possible to simulate the typical behavior of soft- to continuous improvement in software development.
ware development projects to address planning and control Using simulation models based on SD is convenient to
issues [117]. support process improvement in software development [137].

The schedule and delivery time of software development In this regard, Ramdoo and Gukhool [138] proposed a model
projects have been of interest [118], [119], [120], [121], that involves the relationship between maturity levels and
[122], as well as resource allocation [123] and the inspec- fluctuations in software quality. Aligned with this approach,
tion and testing process [124], [125], [126]. These proposals the model proposed in this study integrates information about
recognize that SD is a simulation paradigm that facilitates the the level of maturity, considering CMMI and its relation-
management of software development projects. ship with ISO/IEC 29110. This aspect is relevant because

Regarding non-technical factors, Caulfield and Maj [127] it facilitates the identification of improvement opportuni-
indicated that including soft variables in simulation mod- ties, promoting the implementation of best practices that are
els allows for more informed sociotechnical models. From aligned with high standards in the software industry. Includ-
a qualitative perspective, factors such as leadership, self- ing ISO/IEC 29110 [139] in this type of model is the first step
management, and adaptability have been incorporated [128], to support their dissemination and adoption in small infor-
[129]. Likewise, some simulation models address aspects mation technology companies, given that these companies
such as openness and the ability to understand the ideas and represent at least 70% of the sector [96].
interests of others [130], team interaction, individual behav- In the field of Software Engineering, few studies use SD
ior [131], communication overload [27], [85], [94], [132], models and report in detail the stock and flow diagrams
and motivation [133]. Even though these research works along with the underlying equations that support them [20].

24616 VOLUME 13, 2025



L. M. Restrepo-Tamayo et al.: Simulation of Software Development Team Productivity Incorporating Social

This situation limits the replicability and validation of the Thus, the model proposed in this study represents a founda-
models presented [136]. This study addresses this limitation tional structure for understanding the productivity behavior
and stands out from other published works by providing a of these teams. This aspect contributes to team management,
detailed description of both the stock and flow diagrams as as it allows the identification of improvement opportunities
well as the equations used. This approach aims at facilitating related to SHF and enables decisions aimed at strengthening
the review, implementation, and application of the model by team effectiveness.
researchers and professionals in this field. In summary, key findings include:

VI. LIMITATIONS AND THREATS TO VALIDITY • Leadership strategies aligned with the team’s develop-
The model and results presented in this paper have several mental status and a positive perception of communica-
limitations and threats to validity that need to be taken into tion reduce the percentage of rework.
account when interpreting and applying the results. • Teams in advanced stages of development (such as the

The main limitation relates to the temporal stability performance stage) achieve higher levels of productivity,
assumption: the model assumes that the three SHF included especially when they have adaptive leadership.
(communication, leadership, and teamwork) remain stable • The proposed SD model provides a robust tool for ana-
over the simulation period. While this assumption is reason- lyzing and predicting productivity behaviors, facilitating
able for short periods of time, it may not accurately reflect strategic decisions in project management.
the reality of long-term projects in which these factors may • The inclusion of non-technical factors in planning
evolve. improves the accuracy of estimates and the design of

Regarding internal validity, the causal relationships estab- more effective strategies in team management.
lished in the proposed model, while based on theoretical While these findings represent significant progress in under-
foundations and empirical evidence, might be influenced by standing team productivity dynamics, they also point to
variables not captured in the current model. For instance, the several promising directions for further research, which are
model does not account for external organizational factors explored in the following section.
that could affect team dynamics.

External validity is mainly limited by the model’s focus on
small teams, which makes sense given the high percentage of VIII. FUTURE WORK
small and medium-sized software development companies in Future studies could address the limitations of the model
the industry. However, this restricts the generalizability of the proposed in this article by integrating empirical data from lon-
model to larger work teams. Furthermore, the applicability of gitudinal case studies to validate it. Incorporating real-time
themodel to different cultural contextsmay require validation data from ongoing software development projects would
through further empirical studies. improve the accuracy and applicability of the model.

Finally, the validity of the conclusions could be affected Another direction for future work to expand the use of our
by the reliability of the measurements, particularly in the proposed model is to incorporate other non-technical factors,
assessment of SHF. The subjective origin of the instrument including accounting for distributed teams or teamswith fluc-
responses and the potential bias due to self-reported data tuating compositions [94], projects with multiple teams, and
could affect the accuracy of the findings. Furthermore, the varied organizational cultures [107]. Our proposal is the start-
statistical power of the validation performed may be limited ing point for future research exploring non-linear behaviors
by the sample size and composition of the teams studied. observed in team dynamics, such as regressions or overlaps

These limitations provide opportunities for future research in the Tuckman team development stages. These dynamics
and indicate areas where the model could be enhanced to pro- could be further studied through longer-term simulations
vide more comprehensive insights into software development that take into account fluctuating team compositions and
team dynamics. external influences. Furthermore, exploring adaptive lead-

ership strategies in response to real-time team performance
VII. CONCLUSION metrics could provide valuable insights into effective team
This study presents a productivity simulation model of management.
software development teams based on SD. The model incor- Regarding the simulation model, considering that
porates three relevant SHF in its analysis: communication, non-technical factors are treated as input data, the method-
leadership, and teamwork. The measurement of these factors, ology proposed by McLucas [140] could be adapted to
the establishment of causal relationships among them, and the include other factors once the problem articulation stage is
transition from a qualitative to a quantitative approach culmi- completed. Given that the simulation model presented in this
nating in a robust simulation model with explicit equations study corresponds to an early stage of project management,
represent a significant contribution to empirical research in it would be advisable to adapt the model for the subsequent
Software Engineering. stages of software development projects, where thework to be

The results of the simulations provide a variety of patterns done may be affected by additional requirements or requests
of the aggregate productivity of software development teams. made by the user at later points after the project has started.

VOLUME 13, 2025 24617



L. M. Restrepo-Tamayo et al.: Simulation of Software Development Team Productivity Incorporating Social

Furthermore, we propose to integrate other paradigms, [14] L. F. Capretz, F. Ahmed, and F. Q. B. da Silva, ‘‘Soft sides of
such as agent-based simulation, as a future research direction, software,’’ Inf. Softw. Technol., vol. 92, pp. 92–94, Dec. 2017, doi:

10.1016/j.infsof.2017.07.011.
with the aim of providing more comprehensive analyses and [15] J. A. García-García, J. G. Enríquez, M. Ruiz, C. Arévalo, and
exploring multiple perspectives on the productivity behavior A. Jiménez-Ramírez, ‘‘Software process simulation modeling: System-
of software development teams. atic literature review,’’ Comput. Standards Interface, vol. 70, Jun. 2020,

Another future line work corresponds to the design and Art. no. 103425, doi: 10.1016/j.csi.2020.103425.
[16] J. D. Sterman, Business Dynamics: Systems Thinking and Modeling for a

construction of a simulation framework based on the model Complex World. New York, NY, USA: McGraw-Hill, 2000.
presented here so that software development project leaders [17] K. Hiekata,M. T. Khatun, andM.A. Chavy-Macdonald, ‘‘System dynam-
have an environment that facilitates decision-making during ics modeling to manage performance based on scope change for software

development projects,’’ in Proc. 26th ISTE Int. Conf. Transdisciplinary
the project planning stage. This line includes the design of Eng., Tokyo, Japan, 2019, pp. 675–684, doi: 10.3233/ATDE190177.
interventions for the team related to SHF. This framework, [18] M. T. Khatun, K. Hiekata, Y. Takahashi, and I. Okada, ‘‘Design and man-
in addition to being a tool for managing work teams, also agement of software development projects under rework uncertainty: A

contributes to the Sustainable Development Goals [141] by study using system dynamics,’’ J. Decis. Syst., vol. 32, no. 2, pp. 265–288,
Mar. 2023, doi: 10.1080/12460125.2021.2023257.

providing decision-making tools in the growing software [19] J. S. Aguilar–Ruiz, J. C. Riquelme, D. Rodríguez, and I. Ramos,
industry [142], which is one of the key players in enhancing ‘‘Generation of management rules through system dynamics and evolu-

the technological capacity of industrial sectors in the context tionary computation,’’ in Proc. Int. Conf. Product Focused Softw. Process
Improvement, vol. 2559, 2002, pp. 615–628, doi: 10.1007/3-540-36209-

of the fourth industrial revolution [143], [144]. 6_50.
[20] E. F. Franco, K. Hirama, and M. M. Carvalho, ‘‘Applying system

ACKNOWLEDGMENT dynamics approach in software and information system projects: A map-
ping study,’’ Inf. Softw. Technol., vol. 93, pp. 58–73, Jan. 2018, doi:

The authors would like to thank the Editor and the anonymous 10.1016/j.infsof.2017.08.013.
reviewers for their helpful comments. During the prepara- [21] L. Machuca-Villegas, G. P. Gasca-Hurtado, S. M. Puente, and
tion of this work, the authors used ChatGPT to improve the L. M. Restrepo-Tamayo, ‘‘Factores sociales y humanos que influyen en

la productividad del desarrollo de software: Medición de la percepción,’’
article’s readability and language. After using this tool, the Revista Ibérica de Sistemas e Tecnologias de Informação, vol. E41,
authors reviewed and edited the content as needed and took pp. 488–502, Jan. 2021.
full responsibility for the content of the publication. [22] O. Filipova and R. Vilão, Software Development From A to Z. New York,

NY, USA: Apress, 2018, doi: 10.1007/978-1-4842-3945-2.
[23] A. P. Murray, The Complete Software Project Manager. Hoboken, NJ,

REFERENCES USA: Wiley, 2016.
[1] W. Royce, Software Project Management A Unified Framework. Boston, [24] B. Baj, Ed., Wiley Encyclopedia of Computer Science and Engineering.

MA, USA: Addison Wesley, 1998. Hoboken, NJ, USA: Wiley, 2008.
[2] Guide to the Project Management Body of Knowledge-PMBOK, 7th ed., [25] J. F. Dooley, Software Development, Design and Coding. Galesburg, IL,

Project Management Institute, Newtown Square, PA, USA, 2021. USA: Apress, 2017, doi: 10.1007/978-1-4842-3153-1.
[3] H. Krasner, ‘‘The cost of poor software quality in the U.S.: A 2020 [26] R. Pressman, Ingeniería del Software: Un Enfoque Práctico, 7th ed.,

report,’’ Consortium Inf. Softw. Qual., Needham, MA, USA, Tech. Rep. New York, NY, USA: McGraw-Hill, 2010.
2020, 2021. [27] B. Hughes and M. Cotterell, Software Proiect Management, 5th ed.,

[4] B. Sharma and R. Purohit, ‘‘Review of current software estimation tech- New York, NY, USA: McGraw-Hill, 2009.
niques,’’ Commun. Comput. Inf. Sci., vol. 799, pp. 380–399, Jan. 2018, [28] A. Villafiorita, Introduction to Software Project Management.
doi: 10.1007/978-981-10-8527-7_32. Boca Raton, FL, USA: CRC Press, 2014.

[5] A. J. Albrecht, ‘‘Measuring application development productivity,’’ in [29] M. Jorgensen and M. Shepperd, ‘‘A systematic review of software devel-
Proc. Joint SHARE/GUIDE/IBM Appl. Develop. Symp., 1979, pp. 83–92. opment cost estimation studies,’’ IEEE Trans. Softw. Eng., vol. 33, no. 1,

[6] C. A. Behrens, ‘‘Measuring the productivity of computer systems pp. 33–53, Jan. 2007, doi: 10.1109/TSE.2007.256943.
development activities with function points,’’ IEEE Trans. [30] J. Wen, S. Li, Z. Lin, Y. Hu, and C. Huang, ‘‘Systematic literature
Softw. Eng., vol. SE-9, no. 6, pp. 648–652, Nov. 1983, doi: review of machine learning based software development effort estimation
10.1109/TSE.1983.235429. models,’’ Inf. Softw. Technol., vol. 54, no. 1, pp. 41–59, Jan. 2012, doi:

[7] C. Sadowski and T. Zimmermann, Rethinking Productivity in Software 10.1016/j.infsof.2011.09.002.
Engineering. New York, NY, USA: Springer, 2019 [31] N. Govil and A. Sharma, ‘‘Estimation of cost and development effort

[8] G. Karner, ‘‘Resource estimation for objectory projects,’’ Objective Syst. in scrum-based software projects considering dimensional success fac-
SF AB, vol. 17, no. 1, pp. 1–9, 1993. tors,’’ Adv. Eng. Softw., vol. 172, Oct. 2022, Art. no. 103209, doi:

[9] P. C. Pendharkar, ‘‘Probabilistic estimation of software size and effort,’’ 10.1016/j.advengsoft.2022.103209.
Expert Syst. Appl., vol. 37, no. 6, pp. 4435–4440, Jun. 2010, doi: [32] L. Machuca-Villegas, G. P. Gasca-Hurtado, S. M. Puente, and
10.1016/j.eswa.2009.11.085. L. M. R. Tamayo, ‘‘Perceptions of the human and social factors that

[10] C. H. C. Duarte, ‘‘Software productivity in practice: A systematic influence the productivity of software development teams in colombia: A
mapping study,’’ Software, vol. 1, no. 2, pp. 164–214, May 2022, doi: statistical analysis,’’ J. Syst. Softw., vol. 192, Oct. 2022, Art. no. 111408,
10.3390/software1020008. doi: 10.1016/j.jss.2022.111408.

[11] U. M. Devadas and Y. Y. Dharmapala, ‘‘Soft skills evaluation in the [33] V. Spiezia, ‘‘Jobs and skills in the digital economy,’’ OECD Observer,
information technology and business process management industry in Sri Mar. 2017, doi: 10.1787/de5b1ac4-en.
Lanka: Skills, methods and problems,’’ Int. J. Econ. Bus. Hum. Behav., [34] Talent Radar How the Best Companies Get the Skills They Need to Thrive
vol. 2, no. 3, pp. 1–18, Aug. 2021, doi: 10.5281/zenodo.5280309. in the Digital Era, Infosys, Bengaluru, India, 2019.

[12] D. T. W. Wardoyo and R. S. Dewi, ‘‘Agile leadership cost estima- [35] L. M. Restrepo-Tamayo and G. P. Gasca-Hurtado, ‘‘Non-technical factors
tion model in software development project (case study: Public service in software engineering within the context of industry 4.0,’’ in New
applications),’’ in Proc. 6th Int. Conf. Comput. Informat. Eng. (IC2IE), Perspectives in Software Engineering, vol. 1135, J. Mejía, M. Muñoz,
Sep. 2023, pp. 271–275, doi: 10.1109/ic2ie60547.2023.10330999. A. Rocha, Y. H. Pérez, and H. Avila-George, Eds., Cham, Switzerland:

[13] E. D. Canedo and G. A. Santos, ‘‘Factors affecting software development Springer, 2024, pp. 89–103, doi: 10.1007/978-3-031-50590-4_6.
productivity: An empirical study,’’ in Proc. 33rd Brazilian Symp. Softw. [36] K. G. Cooper, ‘‘The rework cycle: Why projects are mismanaged,’’
Eng., Sep. 2019, pp. 307–316, doi: 10.1145/3350768.3352491. Project Manage. Action, vol. 24, no. 1, pp. 17–21, 1993.

24618 VOLUME 13, 2025



L. M. Restrepo-Tamayo et al.: Simulation of Software Development Team Productivity Incorporating Social

[37] S. Bayer andD. Gann, ‘‘Balancing work: Bidding strategies andworkload [61] L. Rising and N. S. Janoff, ‘‘The scrum software development process
dynamics in a project-based professional service organisation,’’ Syst. Dyn. for small teams,’’ IEEE Softw., vol. 17, no. 4, pp. 26–32, Aug. 2000, doi:
Rev., vol. 22, no. 3, pp. 185–211, 2006, doi: 10.1002/sdr.344. 10.1109/52.854065.

[38] H. Rahmandad and K. Hu, ‘‘Modeling the rework cycle: Capturing [62] B. W. Tuckman, ‘‘Developmental sequence in small groups,’’ Psychol.
multiple defects per task,’’ Syst. Dyn. Rev., vol. 26, no. 4, pp. 291–315, Bull., vol. 63, no. 6, pp. 384–399, Jun. 1965, doi: 10.1037/h0022100.
Oct. 2010, doi: 10.1002/sdr.435. [63] L. Gren, R. Torkar, and R. Feldt, ‘‘Group development and groupmaturity

[39] Y. Jalili and D. N. Ford, ‘‘Quantifying the impacts of rework, schedule when building agile teams: A qualitative and quantitative investigation at
pressure, and ripple effect loops on project schedule performance,’’ Syst. eight large companies,’’ J. Syst. Softw., vol. 124, pp. 104–119, Feb. 2017,
Dyn. Rev., vol. 32, no. 1, pp. 82–96, Jan. 2016, doi: 10.1002/sdr.1551. doi: 10.1016/j.jss.2016.11.024.

[40] S. Lee and F. Peña-Mora, ‘‘Understanding and managing iterative error [64] D. Strode, T. Dingsøyr, and Y. Lindsjorn, ‘‘A teamwork effectiveness
and change cycles in construction,’’ Syst. Dyn. Rev., vol. 23, no. 1, model for agile software development,’’ Empirical Softw. Eng., vol. 27,
pp. 35–60, Mar. 2007, doi: 10.1002/sdr.359. no. 2, pp. 1–50, Mar. 2022, doi: 10.1007/s10664-021-10115-0.

[41] B. D. Owens, N. G. Leveson, and J. A. Hoffman, ‘‘Procedure rework: A [65] B.W. Tuckman andM.A. C. Jensen, ‘‘Stages of small-group development
dynamic process with implications for the ‘rework cycle’ and ‘disaster revisited,’’ Group Org. Stud., vol. 2, no. 4, pp. 419–427, Dec. 1977.
dynamics,’’’ Syst. Dyn. Rev., vol. 27, no. 3, pp. 244–269, Jul. 2011, doi: [66] M. Rossi,Human Resource Design Steering Human-Centered Innovation
10.1002/sdr.464. Within Organisations. Cham, Switzerland: Springer, 2021.

[42] J. M. Lyneis, K. G. Cooper, and S. A. Els, ‘‘Strategic management of [67] S. Eybers and M. J. Hattingh, ‘‘The last straw: Teaching project team
complex projects: A case study using system dynamics,’’ Syst. Dyn. Rev., dynamics to third-year students,’’ in Communications in Computer
vol. 17, no. 3, pp. 237–260, Sep. 2001, doi: 10.1002/sdr.213. and Information Science, vol. 963. Cham, Switzerland: Springer, 2019,

[43] L. F. Luna-Reyes, L. J. Black, A. M. Cresswell, and T. A. Pardo, ‘‘Knowl- pp. 237–252, doi: 10.1007/978-3-030-05813-5_16.
edge sharing and trust in collaborative requirements analysis,’’ Syst. Dyn. [68] K. M. Lui and K. C. C. Chan, ‘‘Pair programming productivity: Novice–
Rev., vol. 24, no. 3, pp. 265–297, Sep. 2008, doi: 10.1002/sdr.404. novice vs. expert–expert,’’ Int. J. Hum.-Comput. Stud., vol. 64, no. 9,

[44] T. Walworth, M. Yearworth, L. Shrieves, and H. Sillitto, ‘‘Estimating pp. 915–925, Sep. 2006, doi: 10.1016/j.ijhcs.2006.04.010.
project performance through a system dynamics learning model,’’ Syst. [69] M. Edson and G. Metcalf, ‘‘Adaptive capacity in project teams,’’ in Proc.
Eng., vol. 19, no. 4, pp. 334–350, Jul. 2016, doi: 10.1002/sys.21349. 58th Annual Meeting (ISSS), 2014, pp. 109–143.

[45] F. Ahmed, L. F. Capretz, S. Bouktif, and P. Campbell, ‘‘Soft skills [70] J. F. Super, ‘‘Building innovative teams: Leadership strategies across
and software development: A reflection from software industry,’’ Int. the various stages of team development,’’ Bus. Horizons, vol. 63, no. 4,
J. Inf. Process. Manage., vol. 4, no. 3, pp. 171–191, May 2013, doi: pp. 553–563, Jul. 2020, doi: 10.1016/j.bushor.2020.04.001.
10.4156/ijipm.vol4.issue3.17. [71] K. Nicolopoulou, M. Koštomaj, and A. Campos, ‘‘How to address

[46] A. G. Rodrigues and T. M. Williams, ‘‘System dynamics in software group dynamics in virtual worlds,’’ AI Soc., vol. 20, no. 3, pp. 351–371,
project management: Towards the development of a formal integrated Jun. 2006, doi: 10.1007/s00146-005-0027-0.
framework,’’ Eur. J. Inf. Syst., vol. 6, no. 1, pp. 51–66, Mar. 1997, doi: [72] M. Niever, N. Trefz, J. Heimicke, C. Hahn, and A. Albers, ‘‘Situation-
10.1057/palgrave.ejis.3000256. and need-based method recommendation for coaching agile devel-

[47] C. Caulfield, G. Kohli, and S. P. Maj, ‘‘Sociology in software engi- opment teams,’’ Proc. CIRP, vol. 100, pp. 512–517, Jan. 2021, doi:
neering,’’ in Proc. Amer. Soc. Eng. Educ. Annu. Conf. Expo., 2004, 10.1016/j.procir.2021.05.112.
pp. 12685–12697, doi: 10.18260/1-2–14027. [73] A. L. Mesquida, J. Karać, M. Jovanović, and A. Mas, ‘‘A game toolbox

[48] L. M. Restrepo-Tamayo, G. P. Gasca-Hurtado, and J. Valencia-Calvo, for process improvement in agile teams,’’ in Proc. Commun. Comput.
‘‘Characterizing social and human factors in software development team Inf. Sci., vol. 748. Cham, Switzerland: Springer, 2017, pp. 302–309, doi:
productivity: A system dynamics approach,’’ IEEE Access, vol. 12, 10.1007/978-3-319-64218-5_25.
pp. 59739–59755, 2024, doi: 10.1109/ACCESS.2024.3388505. [74] S. A. Wheelan and J. M. Hochberger, ‘‘Validation studies of the

[49] M. Schaffernicht, Indagación de Situaciones Dinámicas Mediante la group development questionnaire,’’ Small Group Res., vol. 27, no. 1,
Dinómica de Sistemas. Tomo 1: Fundamentos. Talca, Chile: Universidad pp. 143–170, Feb. 1996, doi: 10.1177/1046496496271007.
de Talca, 2010. [75] L. Gren, C. Jaconsson, N. Rydbo, and P. Lenberg, ‘‘The group develop-

[50] J. Aracil, Dinámica de Sistemas, 4th ed., Madrid, España: Isdefe, 2016. ment questionnaire short (GDQS) scales: Tiny-yet-effective measures of
[51] E. Pruyt, System Dynamics Models for Big Issues: Triple Jump Towards team/small group development,’’ GDQ Associates, Stockholm, Sweden,

Real-World Complexity. Amsterdam, The Netherlands: TU Delft Library, 2020.
2013, doi: 10.1007/978-1-84882-809-4_2. [76] D. L. Miller, ‘‘The stages of group development: A retrospective study

[52] C. Cadenas and W. Guaita, Dinámica de Sistemas Una Metodología of dynamic team processes,’’ Can. J. Administ. Sci. /Revue Canadi-
Para la Construcción de Modelos de Toma de decisiones en Sectores enne des Sci. de l’Admin., vol. 20, no. 2, pp. 121–134, Jun. 2003, doi:
Agroindustriales. Bogotá, Colombia: Editorial Politécnico Grancolom- 10.1111/j.1936-4490.2003.tb00698.x.
biano, 2020. [77] R. E. Levasseur, ‘‘People skills: Optimizing team development and

[53] P. M. Senge, La Quinta Disciplina: El Arte y la Práctica de la Orga- performance,’’ Interfaces, vol. 41, no. 2, pp. 204–208, Apr. 2011, doi:
nización Abierta al Aprendizaje, 2nd ed. Buenos Airesm, Argentina: 10.1287/inte.1100.0519.
Granica, 2010. [78] R. Hughes, ‘‘Streamlining project management,’’ in Agile Data Ware-

[54] A. Sarmiento-Vásquez and E. López-Sandoval, ‘‘Una comparación cual- housing Project Management. Burlington, MA, USA: Morgan Kauf-
itativa de la dinámica de sistemas, la simulación de eventos discretos y la mann, 2013, pp. 81–113, doi: 10.1016/b978-0-12-396463-2.00003-x.
simulación basada en agentes,’’ Ingeniería Ind., vol. 35, p. 27, Dec. 2017, [79] S. Wolpers, The Scrum Anti-Patterns Guide, 1st ed., Hoboken, NJ, USA:
doi: 10.26439/ing.ind2017.n035.1789. Addison-Wesley, 2023.

[55] A. M. Law, Simulation Modeling and Analysis, 5th ed., New York, NY, [80] A. N. B. M. Nasir, D. F. Ali, M. K. bin Noordin, and M. S. B. Nordin,
USA: McGraw-Hill, 2015, doi: 10.2307/2288169. ‘‘Technical skills and non-technical skills: Predefinition concept Mohd

[56] J. W. Forrester, Industrial Dynamics. Cambridge, MA, USA: MIT Press, Safarin Bin NORDIN,’’ in Proc. IETEC Conf., Kuala Lumpur, Malaysia,
1961. 2011, pp. 1–17.

[57] L. G. Birta and G. Arbez,Modelling and Simulation Exploring Dynamic [81] M. Hoegl and H. G. Gemuenden, ‘‘Teamwork quality and the suc-
System Behaviour, 3rd ed., Cham, Switzerland: Springer, 2019, doi: cess of innovative projects: A theoretical concept and empirical evi-
10.1201/b16599-4. dence,’’ Org. Sci., vol. 12, no. 4, pp. 435–449, Aug. 2001, doi:

[58] Y. Barlas, ‘‘Model validation in system dynamics,’’ inProc. Int. Syst. Dyn. 10.1287/orsc.12.4.435.10635.
Conf., 1994, pp. 1–10. [82] G. Marsicano, F. Q. B. da Silva, C. B. Seaman, and B. G. Adaid-Castro,

[59] P. Sudhakar, A. Farooq, and S. Patnaik, ‘‘Measuring productivity of ‘‘The teamwork process antecedents (TPA) questionnaire: Develop-
software development teams,’’ Serbian J. Manage., vol. 7, no. 1, ing and validating a comprehensive measure for assessing antecedents
pp. 65–75, 2012, doi: 10.5937/sjm1201065s. of teamwork process quality,’’ Empirical Softw. Eng., vol. 25, no. 5,

[60] D. Rodríguez, M. A. Sicilia, E. García, and R. Harrison, ‘‘Empir- pp. 3928–3976, Sep. 2020.
ical findings on team size and productivity in software develop- [83] P. Hsia, C.-T. Hsu, and D. C. Kung, ‘‘Brooks’ law revisited: A system
ment,’’ J. Syst. Softw., vol. 85, no. 3, pp. 562–570, Mar. 2012, doi: dynamics approach,’’ inProc. 23rd Annu. Int. Comput. Softw. Appl. Conf.,
10.1016/j.jss.2011.09.009. 1999, pp. 370–375.

VOLUME 13, 2025 24619



L. M. Restrepo-Tamayo et al.: Simulation of Software Development Team Productivity Incorporating Social

[84] M. Wu and H. Yan, ‘‘Simulation in software engineering with sys- [107] L. Gren and M. Lindman, ‘‘What an agile leader does: The group
tem dynamics: A case study,’’ J. Softw., vol. 4, no. 10, pp. 1127–1135, dynamics perspective,’’ in Agile Processes in Software Engineering and
Dec. 2009, doi: 10.4304/jsw.4.10.1127-1135. Extreme Programming. Cham, Switzerland: Springer, 2020, pp. 178–194,

[85] T. K. Abdel-Hamid, ‘‘The dynamics of software project staffing: A doi: 10.1007/978-3-030-49392-9_12.
system dynamics based simulation approach,’’ IEEE Trans. Softw. Eng., [108] T.Myklebust and T. Stålhane, ‘‘Agile practices,’’ in Functional Safety and
vol. 15, no. 2, pp. 109–119, Feb. 1989, doi: 10.1109/32.21738. Proof of Compliance. Cham, Switzerland: Springer, 2021, pp. 25–58, doi:

[86] S. Wood, G. Michaelides, and C. Thomson, ‘‘Successful extreme 10.1007/978-3-030-86152-0_2.
programming: Fidelity to the methodology or good teamworking?’’ [109] C. A. Schriesheim, J. B. Wu, and T. A. Scandura, ‘‘A meso mea-
Inf. Softw. Technol., vol. 55, no. 4, pp. 660–672, Apr. 2013, doi: sure? Examination of the levels of analysis of the multifactor leadership
10.1016/j.infsof.2012.10.002. questionnaire (MLQ),’’ Leadership Quart., vol. 20, no. 4, pp. 604–616,

[87] E. Salas, D. E. Sims, and C. S. Burke, ‘‘Is there a ‘big five’ in team- Aug. 2009, doi: 10.1016/j.leaqua.2009.04.005.
work?’’ Small Group Res., vol. 36, no. 5, pp. 555–599, Oct. 2005, doi: [110] M. J. Tejeda, T. A. Scandura, and R. Pillai, ‘‘The MLQ revisited: Psy-
10.1177/1046496405277134. chometric properties and recommendations,’’ Leadership Quart., vol. 12,

[88] M. Alefari, M. Almanei, and K. Salonitis, ‘‘A system dynamics model no. 1, pp. 31–52, Mar. 2001.
of Employees’ performance,’’ Sustainability, vol. 12, no. 16, p. 6511, [111] B. Bala, F. Mohamed, and K. Mohd, System Dynamics. Mod-
Aug. 2020, doi: 10.3390/su12166511. elling and Simulation. Cham, Switzerland: Springer, 2017, doi:

[89] P. Hersey, K. H. Blanchard, andW. E. Natemeyer, ‘‘Situational leadership, 10.4324/9780203112694-14.
perception, and the impact of power,’’ Group Org. Stud., vol. 4, no. 4, [112] L. Gren and M. Shepperd, ‘‘Problem reports and team maturity in
pp. 418–428, Dec. 1979, doi: 10.1177/105960117900400404. agile automotive software development,’’ in Proc. IEEE/ACM 15th Int.

[90] P. Ciancarini, M. Missiroli, and S. Zani, Empirical Evaluation of Workshop Cooperat. Hum. Aspects Softw. Eng. (CHASE), May 2022,
Agile Teamwork, vol. 1439. Cham, Switzerland: Springer, 2021, doi: pp. 41–45, doi: 10.1145/3528579.3529173.
10.1007/978-3-030-85347-1_11. [113] T. C. Pfutzenreuter, E. P. D. Lima, and J. R. Frega, ‘‘High per-

[91] D. D. Wackerly, W. Mendenhall, and R. L. Scheaffer, Estadística
formance teams: An investigation of the effect on self-management

Matemática con Aplicaciones, 7th ed., 2010, doi: 10.2307/1269356.
[92] C. Laporte andA.April, SoftwareQuality Assurance. Hoboken, NJ, USA: towards performance,’’ Production, vol. 31, pp. 1–14, Jan. 2021, doi:

Wiley, 2018. 10.1590/0103-6513.20210053.
[93] B. Nagaria and T. Hall, ‘‘How software developers mitigate their errors [114] A. Zirar, N.Muhammad, A. Upadhyay, A. Kumar, and J. A. Garza-Reyes,

when developing code,’’ IEEE Trans. Softw. Eng., vol. 48, no. 6, ‘‘Exploring lean team development from the Tuckman’s model per-
pp. 1853–1867, Jun. 2022, doi: 10.1109/TSE.2020.3040554. spective,’’ Prod. Planning Control, vol. 34, pp. 1–22, Oct. 2023, doi:

[94] S. G. Dastidar, ‘‘Model of distributed software development 10.1080/09537287.2023.2275693.
using system dynamics,’’ M.S. thesis, Dept. Comput. Sci., [115] A. P. G. Scheidegger, T. F. Pereira, M. L. M. de Oliveira, A. Banerjee,
Iowa State Univ., Ames, IA, USA, 2015. [Online]. Available: and J. A. B. Montevechi, ‘‘An introductory guide for hybrid simulation
https://dr.lib.iastate.edu/handle/20.500.12876/28734 modelers on the primary simulation methods in industrial engineer-

[95] CMMI Technical Report: Performance Results, ISACA, Schaumburg, IL, ing identified through a systematic review of the literature,’’ Comput.
USA, 2023. Ind. Eng., vol. 124, pp. 474–492, Oct. 2018, doi: 10.1016/j.cie.2018.07.

[96] R. V. O’Connor and C. Y. Laporte, ‘‘The evolution of the ISO/IEC 29110 046.
set of standards and guides,’’ Int. J. Inf. Technol. Syst. Approach, vol. 10, [116] A. G. Rodrigues and J. Bowers, ‘‘System dynamics in project man-
no. 1, pp. 1–21, Jan. 2017, doi: 10.4018/ijitsa.2017010101. agement: A comparative analysis with traditional methods,’’ Syst. Dyn.

[97] Software Engineering-Lifecycle Profiles for Very Small Entities (VSEs)— Rev., vol. 12, no. 2, pp. 121–139, Jan. 1996, doi: 10.1002/(SICI)1099-
Part 5-1-1: Management and Engineering Guide: Generic Profile Group: 1727(199622)12:2<121::AID-SDR99>3.0.CO;2-X.
Entry Profile, document ISO/IEC TR 29110-5-1-1:2012, 2012. [117] D. Pfahl, N. Koval, and G. Ruhe, ‘‘An experiment for evaluating the effec-

[98] C. Y. Laporte, R. V. O. Connor, and L. H. G. Paucar, ‘‘The imple- tiveness of using a system dynamics simulation model in software project
mentation of ISO/IEC 29110 software engineering standards and guides management education,’’ in Proc. 7th Int. Softw. Metrics Symp., 2001,
in very small entities,’’ in Evaluation of Novel Approaches to Soft- pp. 97–109, doi: 10.1109/metric.2001.915519.
ware Engineering. Cham, Switzerland: Springer, 2016, pp. 162–179, doi: [118] A. G. Rodrigues and T. M. Williams, ‘‘System dynamics in project
10.1007/978-3-319-30243-0. management: Assessing the impacts of client behaviour on project per-

[99] J. F. DeFranco and P. A. Laplante, ‘‘Review and analysis of formance,’’ J. Oper. Res. Soc., vol. 49, no. 1, pp. 2–15, Jan. 1998, doi:
software development team communication research,’’ IEEE Trans. 10.1057/palgrave.jors.2600490.
Prof. Commun., vol. 60, no. 2, pp. 165–182, Jun. 2017, doi: [119] P. C. Das and U. R. Dhar, ‘‘A system dynamics approach towards
10.1109/TPC.2017.2656626. software development project—A case study,’’ Int. Adv. Res. J. Sci.,

[100] D. A. Bonebright, ‘‘40 years of storming: A historical review Eng. Technol., vol. 3, no. 4, pp. 120–123, 2016. [Online]. Available:
of Tuckman’s model of small group development,’’ Human https://iarjset.com/upload/2016/april-16/IARJSET%2026.pdf
Resource Develop. Int., vol. 13, no. 1, pp. 111–120, Feb. 2010, [120] C. Andersson, L. Karlsson, J. Nedstam, M. Host, and B. I. Nilsson,
doi: 10.1080/13678861003589099. ‘‘Understanding software processes through system dynamics

[101] C. Rosen, ‘‘Team management,’’ in Guide To Software Systems Devel- simulation: A case study,’’ in Proc. 9th Annu. IEEE Int. Conf.
opment. Cham, Switzerland: Springer, 2020, ch. 4, pp. 57–77, doi: Workshop Eng. Comput.-Based Syst., Apr. 2002, pp. 41–48, doi:
10.1007/978-3-030-39730-2. 10.1109/ECBS.2002.999821.

[102] T. C. Pfutzenreuter, E. P. de Lima, and J. R. Frega, Building High Perfor- [121] M. T. I. Trammell, A. Moulton, and S. E. Madnick, ‘‘Effects of
mance Teams (Communications in Computer and Information Science). funding fluctuations on software development: A system dynamics anal-
Cham, Switzerland: Springer, 2021, pp. 251–264, doi: 10.1007/978-3- ysis,’’ Eng. Manage. J., vol. 28, no. 2, pp. 71–85, Apr. 2016, doi:
030-76307-7_19. 10.1080/10429247.2016.1155390.

[103] M. Kokkoniemi and V. Isomöttönen, ‘‘A systematic mapping study on
group work research in computing education projects,’’ J. Syst. Softw., [122] D. Pfahl, A. Al-Emran, and G. Ruhe, ‘‘A system dynamics simulation
vol. 204, Oct. 2023, Art. no. 111795, doi: 10.1016/j.jss.2023.111795. model for analyzing the stability of software release plans,’’ Softw. Pro-

[104] A. Jones, ‘‘The Tuckman’s model implementation, effect, and analysis & cess, Improvement Pract., vol. 12, no. 5, pp. 475–490, Sep. 2007, doi:
the new development of Jones LSI model on a small group,’’ J. Manage., 10.1002/spip.336.
vol. 6, no. 4, pp. 23–28, Aug. 2019, doi: 10.34218/jom.6.4.2019.005. [123] H. Rahmandad and D. M. Weiss, ‘‘Dynamics of concurrent software

[105] P. Kaygan, ‘‘From forming to performing: Team development for development,’’ Syst. Dyn. Rev., vol. 25, no. 3, pp. 224–249, Jul. 2009,
enhancing interdisciplinary collaboration between design and engineer- doi: 10.1002/sdr.425.
ing students using design thinking,’’ Int. J. Technol. Design Educ., vol. 33, [124] J. D. Tvedt and J. S. Gollofello, ‘‘Evaluating the effectiveness of process
no. 2, pp. 457–478, Apr. 2023, doi: 10.1007/s10798-022-09736-3. improvements on software development cycle time via system dynamics

[106] S. V. Spiegler, D. Graziotin, C. Heinecke, and S. Wagner, ‘‘A quantita- modelling,’’ in Proc. 19th Annu. Int. Comput. Softw. Appl. Conf. (COMP-
tive exploration of the 9-factor theory: Distribution of leadership roles SAC), Aug. 1995, pp. 318–325, doi: 10.1109/CMPSAC.1995.524796.
between scrum master and agile team,’’ in Agile Processes in Software [125] R. J. Madachy, ‘‘System dynamics modeling of an inspection-based
Engineering and Extreme Programming. Cham, Switzerland: Springer, process,’’ in Proc. Int. Conf. Softw. Eng., 1996, pp. 376–386, doi:
2020, pp. 162–177, doi: 10.1007/978-3-030-49392-9_11. 10.1109/icse.1996.493432.

24620 VOLUME 13, 2025



L. M. Restrepo-Tamayo et al.: Simulation of Software Development Team Productivity Incorporating Social

[126] Z. Sahaf, V. Garousi, D. Pfahl, R. Irving, and Y. Amannejad, ‘‘When to LUZ MARCELA RESTREPO-TAMAYO received
automate software testing? Decision support based on system dynam- the degree in industrial engineering from the Uni-
ics: An industrial case study,’’ in Proc. Int. Conf. Softw. Syst. Process, versidad de Antioquia, in 2009, and the Master of
May 2014, pp. 149–158, doi: 10.1145/2600821.2600832. Statistics degree from the Universidad Nacional

[127] C. Caulfield and S. P. Maj, ‘‘A case for system dynamics,’’ Global J. de Colombia, in 2014. She is currently pursuing
Eng. Educ., vol. 6, no. 1, pp. 2793–2798, 2002. [Online]. Available: the Ph.D. degree in engineering with the Univer-
http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=971932 sidad de Medellín. She worked in manufacturing

[128] I. Fatema and K. Sakib, ‘‘Using qualitative system dynamics in the devel- companies and also anAssistant Professor with the
opment of an agile teamwork productivity model,’’ Int. J. Adv. Softw.,
vol. 11, nos. 1–2, pp. 170–185, 2018. Faculty of Engineering, Universidad de Medellín.

[129] I. Fatema, Agile Software Develoment Teamwork Productivity—A System She is involved on the analysis of the productivity
Dynamcs Approach to Analyse the Productivity Influence Factors. Dhaka, of software development teams, considering non-technical factors based on
Univ. Dhaka, 2019. system dynamics. Her research is related to the improvement of productivity

[130] F. Stallinger and P. Grûnbacher, ‘‘System dynamics modelling and simu- and process quality through data analysis.
lation of collaborative requirements engineering,’’ J. Syst. Softw., vol. 59,
no. 3, pp. 311–321, Dec. 2001, doi: 10.1016/s0164-1212(01)00071-1.

[131] M. Alshammri, ‘‘Simulation modelling of human aspects in software
project environment,’’ in Proc. ASWEC 24th Australas. Softw. Eng. Conf.,
2015, pp. 145–146, doi: 10.1145/2811681.2824995.

[132] J. Collofello, D. Houston, I. Rus, A. Chauhan, D. M. Sycamore, and
D. Smith-Daniels, ‘‘A system dynamics software process simulator for
staffing policies decision support,’’ in Proc. 31st Hawaii Int. Conf. Syst.
Sci., vol. 6, 1998, pp. 103–111, doi: 10.1109/hicss.1998.654764. GLORIA PIEDAD GASCA-HURTADO received

[133] T. K. Abdel-Hamid and S. Madnick, ‘‘Software productivity: Poten- the Ph.D. degree from the Department of Lan-
tial, actual, and perceived,’’ Syst. Dyn. Rev., vol. 5, no. 2, pp. 93–113, guages, Computer Systems and Software Engi-
Jun. 1989, doi: 10.1002/sdr.4260050202. neering, Faculty of Informatics, Polytechnic Uni-

[134] B. Liu, H. Zhang, L. Dong, Z. Wang, and S. Li, ‘‘Metrics for software versity of Madrid, Spain. She is currently a
process simulation modeling,’’ J. Softw., Evol. Process, vol. 36, no. 11, Professor with the Faculty of Engineering, Univer-
pp. 1–34, Nov. 2024, doi: 10.1002/smr.2676. sity of Medellín. In addition, she has a background

[135] C. Z. Kirilo, J. M. Abe, L. A. de Lima, L. C. M. Lozano, M. Nogueira, in systems engineering and a specialization in
C. C. de Oliveira, and K. Nakamatsu, ‘‘Organizational climate assessment systems auditing. Her research interests include
using the paraconsistent decision method,’’ Proc. Comput. Sci., vol. 131, educational innovation and digital transformation
pp. 608–618, Jan. 2018, doi: 10.1016/j.procs.2018.04.303. in engineering education, with a specific focus on gamification and enabling

[136] N. Tiruvengadam, A. Elizondo-Noriega, D. Gemes-Castorena, and technologies of the Fourth Industrial Revolution. Additionally, her areas of
M. G. Beruvides, ‘‘Opportunities for system dynamics implemen- interests include training in promising practices for software development in
tation in project management evaluation,’’ in Proc. Portland Int. teams and agile methodologies, the treatment of social and human factors in
Conf. Manage. Eng. Technol. (PICMET), Aug. 2022, pp. 1–8, doi:
10.23919/PICMET53225.2022.9882860. software engineering, and the productivity of software development teams.

[137] H. Zhang, B. Kitchenham, and R. Jeffery, ‘‘A framework for adopt- At the curricular level, the research professor has experience in leading
ing software process simulation in CMMI organizations,’’ in Proc. and participating in curricular innovation processes that incorporate active
Int. Conf. Softw. Process, Jul. 2007, pp. 320–331. [Online]. Available: learning strategies.
https://dl.acm.org/doi/abs/10.5555/1763239.1763272

[138] V. D. Ramdoo and O. Gukhool, ‘‘Applying system dynamics to software
quality management,’’ Int. J. Emerg. Res. Manage. Technol., vol. 6, no. 2,
pp. 28–43, Feb. 2017, doi: 10.23956/ijermt/v6n2/108.

[139] Systems and Software Engineering—Life Cycle Profiles for Very Small
Entities (VSEs), document ISO/IEC FDIS 29110-5-1-2.

[140] A. McLucas, ‘‘Incorporating soft variables into system dynamics
models: A suggested method and basis for ongoing research,’’
in Proc. Syst. Dyn. Conf. Papers, 2003, pp. 20–24. [Online]. JOHNNY VALENCIA-CALVO received the degree
Available: http://www.systemdynamics.org/conferences/2003/proceed/ in electronics engineering, in 2010, the M.Sc.
PAPERS/214.pdf degree in industrial automation from the Univer-

[141] United-Nations. (2019). Goal 9: Build Resilient Infrastructure, sidad Nacional de Colombia, in 2012, and the
Promote Sustainable Industrialization and Foster Innovation. [Online]. Ph.D. degree in computer sciences and decisions,
Available: https://www.un.org/sustainabledevelopment/infrastructure- in 2016. His research experience has led him to
industrialization/ become involved in topics related to dynamic anal-

[142] IT Industry Outlook 2022 Return to Strategy CompTIA, Springfield, IL,
USA, 2022. ysis, non-linear dynamics, and system dynamics,

[143] M. Aksit, ‘‘The role of computer science and software technology in focusing on modeling, simulation, and applica-
organizing universities for Industry 4.0 and beyond,’’ in Proc. Federated tions of mathematics in engineering. He involved
Conf. Comput. Sci. Inf. Syst. (FedCSIS), Sep. 2018, pp. 5–11. on the analysis, design, and modeling of a national electricity market to

[144] O. Bongomin, G. G. Ocen, E. O. Nganyi, A. Musinguzi, and T. Omara, formulate new political strategies. Expert in systems dynamics and complex
‘‘Exponential disruptive technologies and the required skills of Industry systems modeling.
4.0,’’ J. Eng., vol. 2020, pp. 1–17, Feb. 2020, doi: 10.1155/2020/4280156.

VOLUME 13, 2025 24621